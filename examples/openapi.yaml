---
openapi: 3.0.0
info:
  title: Open Leaked YAML
  description: "## Introduction\nThis API is documented in **OpenAPI** format. \n\n## OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\n\n## Authentication\nThe application makes uses of build in authentication. Some of the client calls will be restricted. Use the HTTP basic form to authorize. "
  contact:
    name: Open Leaked
    url: https://github.com/Open-Leaked/Monorepo
    email: openleaked@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.1
  x-logo:
    url: https://raw.githubusercontent.com/Open-Leaked/Monorepo/main/Assets/logo/png/logo-white.png?token=GHSAT0AAAAAACB2FNOUZBLHC6LN6IMED47EZC3SB3Q
    altText: Open-Leaked Logo
servers:
- url: https://virtserver.swaggerhub.com/Peetzie/OpenLeaked/1.7.1
  description: SwaggerHub API Auto Mocking
- url: localhost
  description: Local running server
- url: open-leaked.compute.dtu.dk
  description: DTU Compute VPN Required
tags:
- name: healthcheck
  description: Healthcheck to check backend us running
  x-displayName: HealthCheck
- name: authorisations
  description: Operations about user
  x-displayName: Authorisations
- name: tip
  description: Endpoints for all functionality related to tipping the system maintainers
  x-displayName: Tip
- name: email
  description: All endpoints associated with email lookup
  x-displayname: Searchables
- name: password
  description: All endpoints associated with password lookup
  x-displayname: Searchables
- name: subscribe
  description: All endpoints associated with the subscribe service
  x-displayname: Subscribe
- name: username
  description: All endpoints associated with the username service
  x-displayname: Searcheables
- name: domain
  description: All endpoints assciated with domain lookup
  x-displayname: Searchables
- name: authenticationstatus
  description: All endpoints associated with checking if the user is logged in
  x-displayname: Authoirisations
- name: breaches
  description: Returns a pageable with all breaches and their information
  x-displayname: breaches
- name: csrf
  description: Returns the CSRF token
  x-displayname: csrf
paths:
  /api/domain/breaches:
    post:
      tags:
      - domain
      summary: Finds associated breaches
      description: |-
        Takes a DomainRequestBody, and returns breaches associated with a domain.
         Might return an empty set
      requestBody:
        $ref: '#/components/requestBodies/Domain'
      responses:
        "200":
          description: Retrieved all associated breaches
        "404":
          description: Domain not found in any breaches
      security:
      - basicAuth: []
  /api/domain/exists:
    post:
      tags:
      - domain
      summary: Checks whether or not the domain is existing in a breach
      requestBody:
        $ref: '#/components/requestBodies/Domain'
      responses:
        "200":
          description: Domain was found in a breach
        "404":
          description: Domain was not found in a breach
      security:
      - basicAuth: []
  /api/Username/exists:
    post:
      tags:
      - username
      summary: Checks whether or not the username is existing in a breach
      requestBody:
        $ref: '#/components/requestBodies/Username'
      responses:
        "200":
          description: Username was found in a breach
        "404":
          description: Username was not found in a breach
      security:
      - basicAuth: []
  /api/username/breaches:
    post:
      tags:
      - username
      summary: Finds associated breaches
      description: |-
        Takes a UsernameReqeustBody, and returns breaches associated with a username.
         Might return an empty set
      requestBody:
        $ref: '#/components/requestBodies/Username'
      responses:
        "200":
          description: Retrieved all associated breaches
        "404":
          description: Domain was not found in any breaches
      security:
      - basicAuth: []
  /api/subscribe/verify:
    post:
      tags:
      - subscribe
      summary: Verify user
      description: Authenticate the user by checking the entered verification code.
      requestBody:
        $ref: '#/components/requestBodies/Subscribe'
      responses:
        "200":
          description: Successfully verified user - Entered was correct
        "400":
          description: Could not verify - Entered was incorrect
      security:
      - basicAuth: []
  /api/subscribe/signup:
    post:
      tags:
      - subscribe
      summary: Subscribe to notifications
      description: Adds the user to the database of subscribers
      requestBody:
        $ref: '#/components/requestBodies/Email'
      responses:
        "200":
          description: Successfully added the user
        "400":
          description: Email already exists in the subscribers database
      security:
      - basicAuth: []
  /api/subscribe/unsubscribe:
    post:
      tags:
      - subscribe
      summary: Unsubscribe from notificatons
      description: Removes the user from the subscribers database
      requestBody:
        $ref: '#/components/requestBodies/Email'
      responses:
        "200":
          description: Successfully removed the user from the subscribers database
        "404":
          description: Failed to remove the user - User is not in the subscribers table
      security:
      - basicAuth: []
  /api/password/exists:
    post:
      tags:
      - password
      summary: Checks whether or not the password is existing in a breach
      requestBody:
        $ref: '#/components/requestBodies/Password'
      responses:
        "200":
          description: Password was found in a breach
        "404":
          description: Password was not found in a breach
      security:
      - basicAuth: []
  /api/password/breaches:
    post:
      tags:
      - password
      summary: Finds associated breaches
      description: |-
        Takes a PasswordRequestBody, and returns breaches associated with a password.
         Might return an empty set
      requestBody:
        $ref: '#/components/requestBodies/Password'
      responses:
        "200":
          description: Retrieved all associated breaches
        "404":
          description: Password was not found in any breaches
      security:
      - basicAuth: []
  /api/email/breaches:
    post:
      tags:
      - email
      summary: Finds associated breaches
      description: |-
        Takes a EmailRequestBody, and returns breaches associated with a email.
         Might return an empty set
      requestBody:
        $ref: '#/components/requestBodies/Email'
      responses:
        "200":
          description: Retrieved all associated breaches
        "404":
          description: Email was not found in any breaches
      security:
      - basicAuth: []
  /api/email/exists:
    post:
      tags:
      - email
      summary: Checks whether or not the email is existing in a breach
      requestBody:
        $ref: '#/components/requestBodies/Email'
      responses:
        "200":
          description: Email was found in a breach
        "404":
          description: Email was not found in a breach
      security:
      - basicAuth: []
  /api/amiloggedin:
    post:
      tags:
      - authenticationstatus
      summary: Checks whether or not the current client is authorized.
      responses:
        "200":
          description: Currently connected as an authorized user
        "400":
          description: Currently connected as an unauthorized user
  /api/healthcheck:
    get:
      tags:
      - healthcheck
      summary: Checks that the backend service is running
      responses:
        "200":
          description: Backend server is running
        "503":
          description: Backend server is currently not up
  /api/tip/send:
    post:
      tags:
      - tip
      summary: Allows a user to tip the maintainers with additional breaches
      requestBody:
        $ref: '#/components/requestBodies/Tip'
      responses:
        "200":
          description: Successfully send tip to maintainers
        "409":
          description: Breach already exists in database
      security:
      - basicAuth: []
  /api/auth/login:
    post:
      tags:
      - authorisations
      summary: Authorise an existing user
      description: This action can be performed by anyone with valid credentials. Session is active until logout or closing the browser
      responses:
        "200":
          description: Success
          headers:
            set-cookie:
              description: "SESSION cookie; SamSite=Strict, Secure; HttpOnly"
              style: simple
              explode: false
              schema:
                type: string
        "401":
          description: Unauthorized
          headers:
            X-CUSTOM-AUTHENTICATE:
              style: simple
              explode: false
              schema:
                type: string
      security:
      - basicAuth: []
  /api/auth/logout:
    post:
      tags:
      - authorisations
      summary: Signs out the current user
      description: This action can be performed by any authorized user. Once successfull the session cookie will be removed
      responses:
        "200":
          description: Successfully signed out current user
        "401":
          description: Could not end session for current user
          headers:
            X-CUSTOM-AUTHENTICATE:
              style: simple
              explode: false
              schema:
                type: string
      security:
      - basicAuth: []
  /api/auth/verify:
    post:
      tags:
      - authorisations
      summary: Verify user
      description: Authenticate the user by checking the entered verification code.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
        required: true
      responses:
        "200":
          description: Successfully verified user - Entered was correct
        "400":
          description: Could not verify - Entered was incorrect
  /api/auth/recover:
    post:
      tags:
      - authorisations
      summary: Initiate recovery process
      description: Initiates the recovery process by sending an email to the entered email adress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recover'
        required: true
      responses:
        "200":
          description: Successfully send verification code to user
        "400":
          description: Could not send verification code
  /api/auth/newPassword:
    post:
      tags:
      - authorisations
      summary: Create a new password
      description: Allows the user to create a new password after verification if previous was forgotton. Is a part of the recovery process
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userNewPassword'
        required: true
      responses:
        "200":
          description: Sucessfully updated the password
        "400":
          description: Could not update password
  /api/auth/register:
    post:
      tags:
      - authorisations
      summary: Creates a new user in the users database
      description: Creates a new user using JDBC and BCrypt in the users and authorities table
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterNewUser'
        required: true
      responses:
        "200":
          description: Successfully created a new user
        "400":
          description: Could not create a new user
        "409":
          description: Could not create a new user - Password has been found in a breach
components:
  schemas:
    Domain:
      type: object
      properties:
        value:
          type: string
          example: example.com
      example: example.com
    Username:
      type: object
      properties:
        value:
          type: string
          example: username
      example:
        value: username
    Subscribe:
      type: object
      properties:
        Local:
          type: string
          description: First part of the email pre-@
          example: johndoe
        Domain:
          type: string
          description: Second part of the email post-@
          example: example.com
        verifyCode:
          maxLength: 6
          minLength: 6
          type: string
          description: 6-Digit randomly generated code
          example: "123456"
      example:
        local: example
        domain: example.com
        verifycode: 123456
    Password:
      type: object
      properties:
        value:
          type: string
          description: Unhashed password
          example: password
      example:
        value: password
    Email:
      type: object
      properties:
        Domain:
          type: string
          description: Second part of the email post-@
          example: example.com
        Local:
          type: string
          description: First part of the email pre-@
          example: johndoe
      example:
        local: example
        domain: example.com
    Tip:
      type: object
      properties:
        desc:
          type: string
          description: "Any discription for the data leak. Could be context, types of data or perhabs any password if compressed with password."
          example: Description Example
        size:
          type: integer
          description: The size of the databreach.
          example: 114
          default: 0
        unit:
          type: string
          description: The unit of the previously entered size. This might be GB | No. of records or Unknown.
          example: No. of Records
          default: Unknown
        date:
          type: number
          description: The date in float
          example: 1683577685
        magnetLink:
          type: string
          description: "Unique identifier for the database. Cannot be left empty - No default value. Can be any type of link, not only magnetLinks are allowed."
          example: magnet:?xt=urn:btih:d136b1adde531f38311fbf43fb96fc26df1a34cd&dn=Collection+%232-%235+%26+Antipublic
      example:
        desc: description
        size: 114
        unit: GB
        date: 1683577685
        magnetLink: magnet:?xt=urn:btih:d136b1adde531f38311fbf43fb96fc26df1a34cd&dn=Collection+%232-%235+%26+Antipublic
    RegisterNewUser:
      type: object
      properties:
        emailID:
          $ref: '#/components/schemas/RegisterNewUser_emailID'
        password:
          minLength: 8
          pattern: "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/"
          type: string
          description: "User password, MUST contain a mix of upper and lower case letters, as well as digits and special characters"
          example: drowssaP123#
        cPassword:
          minLength: 8
          pattern: "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/"
          type: string
          description: "User password, MUST contain a mix of upper and lower case letters, as well as digits and special characters."
          example: drowssaP123#
        fullName:
          type: string
          description: Full name of the user
          example: John Doe
        studentNo:
          type: string
          description: Student number or Employee initials - no constraints (proof of concept)
          example: s1741XX
      example:
        emailID:
          local: example
          domain: example.com
        password: password123
        cPassword: password123
        fullName: John Doe
        studentNo: SXXXXXX
    userNewPassword:
      type: object
      properties:
        email:
          type: string
          description: Email in string format
          example: example@example.com
        password:
          minLength: 8
          pattern: "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/"
          type: string
          description: "User password, MUST contain a mix of upper and lower case letters, as well as digits and special characters"
          example: drowssaP123#
        cPassword:
          minLength: 8
          pattern: "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/"
          type: string
          description: "User password, MUST contain a mix of upper and lower case letters, as well as digits and special characters"
          example: drowssaP123#
      example:
        email: johndoe@example.com
        password: '!password123!'
        cPassword: '!password123!'
    Verify:
      type: object
      properties:
        Local:
          type: string
          description: First part of the email pre-@
          example: johndoe
        Domain:
          type: string
          description: Second part of the email post-@
          example: example.com
        verifyCode:
          maxLength: 6
          minLength: 6
          type: integer
          description: 6-Digit randomly generated code
          example: 123456
      example:
        Local: johndoe
        Domain: example.com
        verifyCode: 123456
    Recover:
      type: object
      properties:
        Domain:
          type: string
          description: Second part of the email post-@
          example: example.com
        Local:
          type: string
          description: First part of the email pre-@
          example: johndoe
      example:
        Domain: example.com
        Local: johndoe
    RegisterNewUser_emailID:
      type: object
      properties:
        Local:
          type: string
          description: First part of the email pre-@
          example: johndoe
        Domain:
          type: string
          description: Second part of the email post-@
          example: example.com
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          style: simple
          explode: false
          schema:
            type: string
  requestBodies:
    Domain:
      content:
        application/json:
          schema:
            allOf:
            - title: DomainRequestBody
            - $ref: '#/components/schemas/Domain'
      required: true
    Username:
      content:
        application/json:
          schema:
            allOf:
            - title: UsernameRequestBody
            - $ref: '#/components/schemas/Username'
      required: true
    Subscribe:
      content:
        application/json:
          schema:
            allOf:
            - title: VerifySubscribeRequestBody
            - $ref: '#/components/schemas/Subscribe'
      required: true
    Password:
      content:
        application/json:
          schema:
            allOf:
            - title: Password RequestBody
            - $ref: '#/components/schemas/Password'
      required: true
    Email:
      content:
        application/json:
          schema:
            allOf:
            - title: Email Request Body
            - $ref: '#/components/schemas/Email'
      required: true
    Tip:
      content:
        application/json:
          schema:
            allOf:
            - title: Tip rqeust Body
            - $ref: '#/components/schemas/Tip'
      required: true
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
x-tagGroups:
- name: General
  tags:
  - HealthCheck
  - Subscribe
- name: User Management
  tags:
  - authorisations
- name: Maintainance
  tags:
  - Tip
- name: Searchables
  tags:
  - email
  - password
  - username
