"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>m});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(a),p=r,m=d["".concat(l,".").concat(p)]||d[p]||h[p]||i;return a?t.createElement(m,s(s({ref:n},u),{},{components:a})):t.createElement(m,s({ref:n},u))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},43065:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=a(87462),r=(a(67294),a(3905));const i={sidebar_position:1},s="MariaDB - Persistent storage",o={unversionedId:"Database/MariaDB",id:"Database/MariaDB",title:"MariaDB - Persistent storage",description:"In this section we aim to provide usefull insight into the design decisions for the databases.",source:"@site/docs/02-Database/MariaDB.mdx",sourceDirName:"02-Database",slug:"/Database/MariaDB",permalink:"/OpenLeakedDocs/docs/Database/MariaDB",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/OpenLeakedDocs/docs/Database/Introduction"},next:{title:"Redis - Cache",permalink:"/OpenLeakedDocs/docs/Database/Cache"}},l={},c=[{value:"Loading the schematics",id:"loading-the-schematics",level:2},{value:"Design thoughts",id:"design-thoughts",level:2},{value:"Data",id:"data",level:3},{value:"Authorisations",id:"authorisations",level:3},{value:"Connections",id:"connections",level:2}],u={toc:c};function d(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mariadb---persistent-storage"},"MariaDB - Persistent storage"),(0,r.kt)("p",null,"In this section we aim to provide usefull insight into the design decisions for the databases.\nWe also here define basic schematics used to deploy the project. "),(0,r.kt)("p",null,"The database is based on a SQL database in MariaDB.\nTherefor the entity relationships are important. If improperly design they would slow down the application and vice versa. "),(0,r.kt)("p",null,"The database evolves around 1 ",(0,r.kt)("inlineCode",{parentName:"p"},"SCHEME"),". "),(0,r.kt)("p",null,"The entity relationships are freely available here for the interrested users:"),(0,r.kt)("blockquote",null,(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{target:"_blank",href:a(53182).Z},"Entity Relationship diagram for users"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{target:"_blank",href:a(34641).Z},"Entity Relationship diagram for data"))))),(0,r.kt)("h2",{id:"loading-the-schematics"},"Loading the schematics"),(0,r.kt)("p",null,"To start the Docker containers the SCHEME of the database is important.\nTo get you started we have provided that in SQL form here."),(0,r.kt)("p",null,"Essentially the following snippet creates the tables in the database and adds constraints to values, assigns primary keys and foregin keys.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table breach\n(\n    id            bigint unsigned auto_increment\n        primary key,\n    date          date         null,\n    inserted_date date         not null,\n    name          varchar(255) not null,\n    source        varchar(255) null,\n    verified      tinyint(1)   not null,\n    iconURL       varchar(255) null,\n    summary       text         null,\n    description   text         null\n);\n\ncreate table email\n(\n    id     bigint unsigned not null,\n    domain varchar(255)    not null,\n    local  varchar(255)    not null,\n    primary key (domain, local),\n    constraint domain\n        unique (domain, local),\n    constraint domain_2\n        unique (domain, local),\n    constraint id\n        unique (id),\n    constraint id_2\n        unique (id)\n);\n\ncreate table email_breaches\n(\n    email_id    bigint unsigned not null,\n    breaches_id bigint unsigned not null,\n    primary key (email_id, breaches_id),\n    constraint email_id\n        unique (email_id, breaches_id),\n    constraint email_breaches_ibfk_1\n        foreign key (breaches_id) references breach (id),\n    constraint email_breaches_ibfk_2\n        foreign key (email_id) references email (id)\n);\n\ncreate index breaches_id\n    on email_breaches (breaches_id);\n\ncreate table password\n(\n    id    bigint unsigned not null,\n    value varchar(255)    not null\n        primary key,\n    constraint id\n        unique (id),\n    constraint id_2\n        unique (id),\n    constraint value\n        unique (value),\n    constraint value_2\n        unique (value)\n);\n\ncreate table password_breaches\n(\n    password_id bigint unsigned not null,\n    breaches_id bigint unsigned not null,\n    primary key (password_id, breaches_id),\n    constraint password_id\n        unique (password_id, breaches_id),\n    constraint password_breaches_ibfk_1\n        foreign key (breaches_id) references breach (id),\n    constraint password_breaches_ibfk_2\n        foreign key (breaches_id) references breach (id)\n);\n\ncreate index breaches_id\n    on password_breaches (breaches_id);\n\ncreate table subscription\n(\n    domain varchar(255) not null,\n    local  varchar(255) not null,\n    primary key (domain, local)\n);\n\ncreate table tip\n(\n    magnet_link varchar(255) not null\n        primary key,\n    description varchar(255) null,\n    size        int          null,\n    unit        varchar(255) null,\n    breach_date date         null\n);\n\ncreate table username\n(\n    id    bigint unsigned not null,\n    value varchar(255)    not null\n        primary key,\n    constraint id\n        unique (id),\n    constraint value\n        unique (value)\n);\n\ncreate table username_breaches\n(\n    username_id bigint unsigned not null,\n    breaches_id bigint unsigned not null,\n    primary key (username_id, breaches_id),\n    constraint username_id\n        unique (username_id, breaches_id),\n    constraint username_breaches_ibfk_1\n        foreign key (username_id) references email (id),\n    constraint username_breaches_ibfk_2\n        foreign key (breaches_id) references breach (id)\n);\n\ncreate index breaches_id\n    on username_breaches (breaches_id);\n\ncreate table users\n(\n    username   varchar(50)       not null\n        primary key,\n    password   varchar(100)      not null,\n    full_name  varchar(100)      not null,\n    student_no varchar(50)       not null,\n    enabled    tinyint default 1 not null\n);\n\ncreate table authorities\n(\n    username  varchar(50) not null,\n    authority varchar(50) not null,\n    constraint ix_auth_username\n        unique (username, authority),\n    constraint authorities_ibfk_1\n        foreign key (username) references users (username)\n);\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The following assumes that you've created the ",(0,r.kt)("inlineCode",{parentName:"p"},"SCHEME"),"\nIf not enter the following containerized"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SCHEMA IF NOT EXISTS OPEN_LEAKED\n\nuse OPEN_LEAKED\n"))),(0,r.kt)("h2",{id:"design-thoughts"},"Design thoughts"),(0,r.kt)("p",null,"The design of the database evolves around the idea that each breach in the real world is unique, however their associated data is not.\nAn ",(0,r.kt)("inlineCode",{parentName:"p"},"searchable")," can be found in multiple databases. This help us set up the different entity relationships that are required. "),(0,r.kt)("h3",{id:"data"},"Data"),(0,r.kt)("p",null,"During pre-processing each ",(0,r.kt)("inlineCode",{parentName:"p"},"searchable")," gets an ID assigned by MariaDB. The same goes for each indiviudal breach.\nLarge tables are then created containing an id for an ",(0,r.kt)("inlineCode",{parentName:"p"},"searchable")," and an id for a breach.\nIf a ",(0,r.kt)("inlineCode",{parentName:"p"},"searchable")," is found in multiple breaches the ID would be duplicated in that table. However the primary key with be unique as the associated breach ID would differ from the remainder. "),(0,r.kt)("p",null,"By splitting up entity types we can avoid looking through more records than nessesary - resulting in faster speeds. "),(0,r.kt)("h3",{id:"authorisations"},"Authorisations"),(0,r.kt)("p",null,"There are two disctinct tables from the data tables even though they are contained in the same schematics.\nThis is ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"authorities")," a base schematic from ",(0,r.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/jdbc.html"},"JDBC Authentication")),(0,r.kt)("p",null,"Here they define the ",(0,r.kt)("em",{parentName:"p"},"default")," user schematics as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table users(\n    username varchar_ignorecase(50) not null primary key,\n    password varchar_ignorecase(500) not null,\n    enabled boolean not null\n);\n\ncreate table authorities (\n    username varchar_ignorecase(50) not null,\n    authority varchar_ignorecase(50) not null,\n    constraint fk_authorities_users foreign key(username) references users(username)\n);\ncreate unique index ix_auth_username on authorities (username,authority);\n")),(0,r.kt)("p",null,"To define our much the same way, however we accomodate a bit more information to simulate the info that we possibly would have utilizing the Single-Sign On System from DTU. "),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Single sign on allows users to be authentication across sites by sending a special type of authentication token.\nThis can both be a vulnerability and a security boost based on the application.\nBy using the two-factor authentication from DTU, SSO could help in further securing this application ")),(0,r.kt)("h2",{id:"connections"},"Connections"),(0,r.kt)("p",null,"MariaDB is run through the containerzied image. Thus mounting of volumes and ports are listed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Docker compose")," files.\nAll connections from the backend to mariaDB is done through ",(0,r.kt)("a",{parentName:"p",href:"https://spring.io/"},(0,r.kt)("em",{parentName:"a"},"Spring Boot"))," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"JPA Connection Pool")))}d.isMDXComponent=!0},34641:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/files/ERD_diagram.drawio-812acb15ac1c88f7891c1ce7aaaec176.pdf"},53182:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/files/users_ERD-6c730b86b7d3bf0632cd982c32379fb6.pdf"}}]);